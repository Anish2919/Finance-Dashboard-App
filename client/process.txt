# creating app 

npm create vite@latest

cd client 
npm install 
npm run dev 


# installing libraries
npm i @reduxjs/toolkit react-redux react-router-dom @mui/material @emotion/react @emotion/styled @mui/icons-material @mui/x-data-grid 

npm i -D @types/react-dom 


# configuring eslint 
- install dependencies
npm i -D eslint eslint-config-react-app 

- create eslintrc.json file under 'client' folder. 
code: 
{
    "extends" : "react-app" 
} 


# setting up .env.local 
- create '.env.local' file under 'client' folder. 

# configuring tsconfig.json 
- add "types": ["vite/client"] 

# configuring '@' for import 
- add  
/* Configuring path  */
    "paths": {
      "@/*": ["./src/*"]
    }

- add in vite.config.ts 
npm i -D @types/node 
import path from 'path' 
resolve: { 
    alias: [{ find: '@', replacement: path.resolve(__dirname, 'src') }]
  } 



// configuring eslint in typescript js 
npm i -D eslint
npx eslint --init 

// configuring airbnb eslit 
npx install-peerdeps --dev eslint-config-airbnb 

Note: 




----------- Mui Config and Theme config -- 
we have to use module augmentation to add new variables to the theme and themeoptions. 
declare module '@mui/material/styles' {
  interface Theme {
    status: {
      danger: string;
    };
  }
  // allow configuration using `createTheme`
  interface ThemeOptions {
    status?: {
      danger?: string;
    };
  }
} 

// we used useMemo hook to createTheme. 
const theme = useMemo(() => createTheme(themeSettings), []); 
<ThemeProvider theme={theme}> 
  <CssBaseLine /> // A CssBaseline component is a collection of HTML element and attribute style normalizations that allows kickstarting an elegant, consistent, and simple baseline to build upon
</ThemeProvider> 


---------- React Router and navigation --------- 
we created navigation using react-router-dom and complete navbar. 
for navbar, we created layout and inserted navbar and footer with outlet. In addition, we created share component named 'FlexBetween.tsx' with 'styled()' from '@mui/system'. 

const FlexBetween = styled(Box) ({
    display:'flex', 
    justifyContent:'space-between', 
    alignItems: "center", 
}) 
 
we also used Typorgraphy. from material ui. 


-------------- Dashboard layout ---------------- 
NOTE: 'flexbox' is good for one directional. But if it's horizontal and vertical, grid'll be best (like assymetrical situations). 
link: grid.malven.co. GirdArea is good to use.

created DashboardBox like FlexBox. 
- however, we've used styled with theme props in this. 

Here is the example: 
const DashboardBox = styled(Box)(({ theme }) => ({
    backgroundColor: theme.palette.background.light, 
    borderRadius: "1rem", 
    boxShadow: "0.15rem 0.2rem 0.15rem 0.1rem rgba(0, 0, 0, 0.8)"
}))

--- we used "useMediaQuery" api from "@mui/material". 
Here is the code example: 
  const isAboveMediumScreens = useMediaQuery("(min-width: 1200px)");


-- we have used gridTemplateArea for layout. 

-------------- ReduxToolkit setup and configuration ---------------- 
created store and api.ts. 
entered store provider in app.tsx. 



--------------- Mongodb installation and setup ------------- 
mongoose
  .connect(url)
  .then(async () => app.listen(port, () => console.log(`App is running at port: ${port}`)))
  .catch((e) => console.log(`error from mongoose: ${e.message}`));

we created data.js to store the inital data. 
- we created modal 'KPI.js', used mongoose type currency. 
-  used 'mongoose.connection.db.dropDatabase()' to drop database 
- used 'KPI.insertMany(kpis)' to populate the database data. 


------------------ Key Performance Indicators Route ----------- 
we created route folder. 
- used in index.js. app.use('/kpi', kpiRouter); 










  




