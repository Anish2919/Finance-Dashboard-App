// Configurations 
import express from 'express'; 
import morgan from 'morgan';
import mongoose from 'mongoose'; 
import helmet from 'helmet'; 
import dotenv from 'dotenv'; 
import bodyParser from 'body-parser';


/** CONFIGURATIONS */
dotenv.config(); 

// Initialize Express application
const app = express();  
// Use helmet middleware to set various HTTP headers for security 
app.use(helmet());  
// Use helmet middleware to set cross-origin resource policy (CORP) header 
app.use(helmet.crossOriginResourcePolicy({policy: "cross-origin"}));  
// Use morgan middleware for logging HTTP requests 
app.use(morgan('common')); 
// Parse incomming JSON requests and make it available in req.body 
app.use(bodyParser.json()); 
// Parse URL-encoded data from incoming requests and make it availabe in req.body
app.use(bodyParser.urlencoded({extended: false})); 

const PORT = process.env.PORT || 9000; 

mongoose.connect(process.env.MONGOSE_URL)
    .then(async() => {
        app.listen(PORT, () => console.log(`App is running at: ${PORT}`)); 
    })
    .catch((e) => console.log('error from  mongodb: ', e));  



---------------NOTE: 'toJson': {getters: true} --------------- 
The toJSON: { getters: true } option in the schema definition tells Mongoose to include virtual properties and getters when converting the document to a JSON representation.

In the context of your schema, the get function is used to convert the currency value stored in the database (which is stored as cents) to a more human-readable format (dollars). However, when you call toJSON() on a document, by default Mongoose doesn't include these getters in the output.

By setting { getters: true }, you're telling Mongoose to include these getters when converting the document to JSON, so the output will include the formatted currency values.

For example, if you have a Month document: 
const Month = mongoose.model('Month', monthSchema);

const month = new Month({
  month: 'January',
  revenue: 1500000, // $15,000.00
  expenses: 1000000, // $10,000.00
  operationalExpenses: 800000, // $8,000.00
  nonOperationalExpenses: 200000 // $2,000.00
});

console.log(month.toJSON());

With { toJSON: { getters: true } }, the output would include the formatted currency values:

{
  "month": "January",
  "revenue": 15000,
  "expenses": 10000,
  "operationalExpenses": 8000,
  "nonOperationalExpenses": 2000
}

--------------- Key performance indicator --------------- 
// dropping database before creating new
    // note: it's only for development purpose. 
    // await mongoose.connection.db.dropDatabase(); 
    
    // inserting data from our local database to the mongoose atlas. 
    // KPI.insertMany(kpis);

  

  --------------- Mongodb installation and setup ------------- 
mongoose
  .connect(url)
  .then(async () => app.listen(port, () => console.log(`App is running at port: ${port}`)))
  .catch((e) => console.log(`error from mongoose: ${e.message}`));

we created data.js to store the inital data. 
- we created modal 'KPI.js', used mongoose type currency. 
-  used 'mongoose.connection.db.dropDatabase()' to drop database 
- used 'KPI.insertMany(kpis)' to populate the database data. 

  
